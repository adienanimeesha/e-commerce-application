# ASSIGNMENT 2

# Explain how you implemented the checklist above step-by-step (not just following the tutorial).
1. Create a folder/directory, naming it e-commerce-application
2. Using a terminal or command prompt (I used vscode), open the folder in vscode and open the terminal. 
3. Run the command: python -m venv env in the vscode terminal to create a virtual environment 
4. Use the command: env\Scripts\activate to activate the virtual environment. A virtual environment is crucial since it prevents conflicts with other versions
   of the application in our computer.
6. Set up dependencies since it includes several packages, libraries, and frameworks that will speed up the development of the application.
7. Create a txt file called “requirements.txt” and add the following dependencies: django, gunicorn, whitenouse, psycopg2-binary, requests, urllib3
8. Run the virtual environment (if haven’t) then run the command: pip install -r requirements.txt to install the dependencies. 
9. On the terminal, run the command: django-admin startproject e_commerce_application . to create a project 
10. After creating a project, the project must be configured and the server must run. 
11. In settings.py, w need to add the following:  ALLOWED_HOSTS = ["localhost", "127.0.0.1"] to the ALLOWED_HOST code. This is to ensure the web application
    can be accessed by some allowed hosts. 
12. Then run this command: python manage.py runserver. However,  I made sure that manage.py is active in the directory of my terminal,
13. After running that command, http://localhost:8000 is opened in a browser. We can know if we have created a Django application if an animation of a rocket appears on the screen. 
14. Then run the command: deactivate to deactivate the virtual environment. Now we have created a Django application.
15. After creating a Django application, we must upload the project to the GitHub Repository. This is done by creating a repository, and naming it e-commerce-application
    and ensure it public, not private. 
16. Create a .gitignore file in the e-commerce-application repository and paste the texted listed in tutorial 0. This step allows certain files and directories
    to be ignored by Git since there are times when files shouldn’t be added. 
17. Go to the GitHub website, where e-commerce-application repository is opened. There should be a list of codes, and those codes are copied and pasted to the terminal. 
18. Let the code run and once finished, refresh the GitHub page and the following files should appear: e_commerce_application (folder), .gitignore, manage.py, and requirements.txt
19. Then, we need to make a Django Application and configure the model (mvt concept). This is done by opening the e-commerce-application root directory. 
20. Open the terminal (in my case, in vscode) and ensure the virtual environment is active. If not, run the following code: env\Scripts\activate to activate it
21. Create a new application inside the e-commerce-application project. This application will be called “main”. Run this code: python manage.py startapp main to create a new application. 
22. Inside the e-commerce-application directory, open settings.py and add “main” in INSTALLED_APPS. This allows the main application to be registered in the e-commerce application 
23. Within main, create a folder/directory called “template”. This serves as the folder where the main.html is located. 
24. In the template directory, create a new file, main.html, and fill it in with the following details:
<h1>{{ application_name }}</h1>

<h5>Name: </h5>
<p>{{ name }}<p>
<h5>Class: </h5>
<p>{{ class }}<p>
24. Inside the main application directory, the file models.py is modified. This is to create a model in the application “main”. Then add the following code to the file:
from django.db import models
class Product(models.Model):
    name = models.CharField(max_length=255)
    price = models.IntegerField()
    description = models.TextField()


25. Run the following code: python manage.py makemigrations to create model migrations. And run this code: python manage.py migrate to apply migrations to the local database.
26. Afterward, we will create a template that will display our name and class. Inside the file views.py, create a function called “show_main” and add the following code:
from django.shortcuts import render

def show_main(request):
    context = {
        'application_name': 'Vortex Vision',
        'class': 'PBD KKI',
        'name': 'Adiena Nimeesha Adiwinastwan',
    }

    return render(request, "main.html", context)
This code is capable of accepting a request parameter. 
27. Next, we must set the URL routing up so that the main application is accessible via a web browser. This is done in the “main” directory and create a file called “urls.py”
28. Add the following code in urls.py:
from django.urls import path
from main.views import show_main

app_name = 'main'

urlpatterns = [
    path('', show_main, name='show_main'),
]
29. Then the project URL routing must be configured. This is done by opening the urls.py file and importing the “include” function from django.urls.  
30. Integrate the following code:   path('', include('main.urls')), in the “urlpatterns” variable.
31. Run the project with the following command: python manage.py runserver and wait.
32. In a web browser, open http://localhost:8000/. If the previous steps are successful, the name of the store, my name, and my class should be visible. 


# Create a diagram that contains the request client to a Django-based web application and the response it gives, 
and explain the relationship between urls.py, views.py, models.py, and the html file.



# Explain the use of git in software development!
Git is used in software development since it’s a tool that is used for source code management. It is able to track the changes made in the source code, 
which provides ease for multiple developers to collaborate and work together. Other than that, Git is free, making it accessible to everyone. 


# In your opinion, out of all the frameworks available, why is Django used as the starting point for learning software development?
In my opinion, Django is the starting point for learning software development because it implements MVT. This allows developers 
to control and manage the components needed for a web application and developers can organize their code. Other than that, 
developers are capable of creating projects or web applications that are small or large-scale, so developers can start small using Django. 


# Why is the Django model called an ORM?
The Django model is called an ORM because it allows users to interact with databases. Other than that, it allows users to do 
the following actions: delete, modify, add, and query objects.

---------------------------------------------------------------------------------

# ASSIGNMENT 3
Explain why we need data delivery in implementing a platform
Data delivery is needed in implementing a platform because it allows communication between components. What is meant by 
components includes front-end, databases, and back-end. Data delivery is utilized such that communication is carried out 
thoroughly between these components. 

# In your opinion, which is better, XML or JSON? Why is JSON more popular than XML?
In my opinion, JSON is better than XML. JSON is more popular than XML because it is simpler to use. Not only that, it 
is much more flexible than XML and it is faster to read and write. 

# Explain the functional usage of is_valid() method in Django forms. Also explain why we need the method in forms.
is_valid() is utilized for validation. This is needed because it ensures the data that is inputted by the user is valid 
and is according to the forms field. 

# Why do we need csrf_token when creating a form in Django? What could happen if we did not use csrf_token on a Django form? How could this be leveraged by an attacker?
Csfr_token is needed when creating a form in Django because it provides security and allows users to stay away from csfr 
attacks. If csfr_token is not used, users could be prone or exposed to csfr attacks, which is dangerous since these attacks 
allow attackers to gain full access to the account. Attackers ould leverage this by triggering unintended actions. By this, 
attackers could manipulate users to submit their form and attackers could change the password, email address, or omit the 
user’s account. 


# Explain how you implemented the checklist above step-by-step (not just following the tutorial).
To create a form input,a file called forms.py is created in the main directory. The content of this file is used such that 
it can receive data when new products are inputted. In the file, import Product and create a model, where model = Product. 
This ensures any data from the form is saved as an object of Product. Then create “fields” and include “name”, “description”, 
and “price”. This notifies the fields of the Product model that will be used for the form. 


Adding four views to view the added objects (in XML, JSON, XML by ID, and JSON by ID) formats is done in the views.py file. 
Before starting, import HttpResponse and Serializer from django.http and django.core respectively. Then, define a new function 
called “show_xml” that takes a request parameter. Inside the function, make a variable to store the result of the quest that 
retrieves all records from the Product model. Under that line of code, add a return function as an HttpResponse that contains 
the serialized data result as XML and the content_type=”application/xml”. This step is needed because returning the serialized 
data in XML format within an HttpsResponse allows the data to be structured properly for the user. Then, open the urls.py file 
located in the main directory and add show_xml to the import list at the top of the file. Afterwards, add a URL path to the 
urlpatterns variable (still inside urls.py file) such that the function from earlier can be accessed. Once done, run the Django 
project and access this link http://localhost:8000/xml/. Repeat these steps to return data in JSON format. The only difference 
is the variable show_json when creating a function and accessing this link http://localhost:8000/json/ to see if it works. 


Returning data based on an ID in XML and JSON format is done in the views.py file as well. In the file, make two functions called 
show_xml_by_id and show_json_by_id. Inside the function, create a variable called data. This variable will store the query of data 
with the specific ID that exists in Product. Still inside the function, add a return function as an HttpResponse that contains the 
serializes data result as JSON or XML. It will also consist of the content type with the value “application/xml” for XML and 
“application/JSON” for JSON. Go to the urls.py file and add show_xml_by_id and  show_json_by_id at the import so that it can be accessed. 
Then add the URL path to the variable “urlpatterns” (still within the urls.py file) so the functions created can be accessed. To test 
if it’s working, run the Django project and access either http://localhost:8000/xml/%5Bid%5D/ or http://localhost:8000/json/%5Bid%5D/ 

# Postman 
Please access this google docs for the screenshots
https://docs.google.com/document/d/18KLgCiYmS2iF77iCh9bDfUnUDitMM3sCQ1r_47rlUn4/edit?usp=sharing 